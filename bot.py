import logging
import time
import requests
import threading
from datetime import datetime
import pytz

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö log ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô logging.DEBUG ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π log ‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô)
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

FIREBASE_URL = "https://bosstimer-2a778-default-rtdb.asia-southeast1.firebasedatabase.app/.json"
DISCORD_WEBHOOK_URL = "https://ptb.discord.com/api/webhooks/1382831229681930300/gFhSSjfKBamc9hFGBJ7KEZOEcSpPjBmV3h8t_o5n6pGfCsIWeGFhIZbGYtF9IDlQcZOW"
GUARDIAN_ROLE_ID = "1377155652480401499"  # Role ID ‡∏Ç‡∏≠‡∏á @guardian

notified_5_min = set()
notified_3_min = set()
last_death_record = {}

def fetch_boss_data(retries=3, delay=5):
    for attempt in range(1, retries + 1):
        try:
            response = requests.get(FIREBASE_URL, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if "bosses" in data:
                    logging.debug(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö {len(data['bosses'])} ‡∏ï‡∏±‡∏ß")
                    return data["bosses"]
                else:
                    logging.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÉ‡∏ô Firebase ‡πÑ‡∏°‡πà‡∏°‡∏µ key 'bosses'")
                    return {}
            else:
                logging.error(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {response.status_code})")
        except Exception as e:
            logging.error(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e})")

        if attempt < retries:
            logging.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1} ‡∏´‡∏•‡∏±‡∏á {delay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(delay)

    logging.error("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return {}

def notify_discord(message):
    tagged_message = f"<@&{GUARDIAN_ROLE_ID}> {message}"
    logging.info(f"‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord: {message}")
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json={"content": tagged_message}, timeout=10)
        if response.status_code not in (200, 204):
            logging.error(f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {response.status_code})")
    except Exception as e:
        logging.error(f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

def format_owner(owner):
    if owner and owner.strip():
        return f"\nüëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™: **{owner.strip()}**"
    return ""

def process_boss(boss, info, now_ts):
    cooldown = info.get("cooldown")
    last_death = info.get("lastDeath")
    owner = info.get("owner", "").strip() if info.get("owner") else ""

    if cooldown is None or last_death is None:
        logging.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™ {boss} ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (cooldown ‡∏´‡∏£‡∏∑‡∏≠ lastDeath ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)")
        return

    try:
        cooldown_ms = float(cooldown) * 1000
        last_death = int(last_death)
    except Exception as e:
        logging.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™ {boss} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (cooldown ‡∏´‡∏£‡∏∑‡∏≠ lastDeath ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç): {e}")
        return

    spawn_time = last_death + cooldown_ms
    time_diff = spawn_time - now_ts

    if boss not in last_death_record or last_death_record[boss] != last_death:
        notified_5_min.discard(boss)
        notified_3_min.discard(boss)
        last_death_record[boss] = last_death
        logging.info(f"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ {boss}")

    logging.debug(f"[{boss}] cooldown={cooldown_ms} ms, lastDeath={last_death}, spawn_time={spawn_time}, time_diff={time_diff} ms")

    if 0 <= time_diff <= 300000 and boss not in notified_5_min:
        notify_discord(
            f"‚è∞ **[‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô]** ‡∏ö‡∏≠‡∏™ **{boss}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ! ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°! ‚öîÔ∏è{format_owner(owner)}"
        )
        notified_5_min.add(boss)
    elif 0 <= time_diff <= 180000 and boss not in notified_3_min:
        notify_discord(
            f"‚åõ **[‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á]** ‡∏ö‡∏≠‡∏™ **{boss}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ! üõ°Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏•‡∏≤‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™! üî•{format_owner(owner)}"
        )
        notified_3_min.add(boss)

def monitor_bosses():
    logging.info("Bot ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
    tz = pytz.timezone("Asia/Bangkok")

    while True:
        bosses = fetch_boss_data()
        if not bosses:
            logging.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
            time.sleep(50)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 50 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            continue

        logging.info(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÑ‡∏î‡πâ {len(bosses)} ‡∏ï‡∏±‡∏ß")
        for boss, info in bosses.items():
            logging.debug(f"  - {boss}: cooldown={info.get('cooldown')}, lastDeath={info.get('lastDeath')}, owner={info.get('owner', '')}")

        now = datetime.now(tz)
        now_ts = int(now.timestamp() * 1000)

        for boss, info in bosses.items():
            process_boss(boss, info, now_ts)

        time.sleep(50)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 50 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

if __name__ == "__main__":
    monitor_thread = threading.Thread(target=monitor_bosses)
    monitor_thread.daemon = True
    monitor_thread.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
